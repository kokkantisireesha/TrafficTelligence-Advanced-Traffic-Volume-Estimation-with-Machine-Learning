import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import joblib

# Create synthetic traffic data
np.random.seed(42)
n_samples = 5000

# Generate features
data = {
    'hour': np.random.randint(0, 24, n_samples),
    'temperature': np.random.uniform(-5, 35, n_samples),
    'humidity': np.random.uniform(20, 100, n_samples),
    'wind_speed': np.random.uniform(0, 40, n_samples),
    'is_holiday': np.random.choice([0, 1], n_samples, p=[0.9, 0.1]),
    'is_weekend': np.random.choice([0, 1], n_samples, p=[0.7, 0.3]),
    'road_type': np.random.choice(['highway', 'arterial', 'residential'], n_samples, p=[0.4, 0.4, 0.2]),
    'near_intersection': np.random.choice(['yes', 'no'], n_samples, p=[0.6, 0.4]),
    'volume': np.zeros(n_samples)
}

# Create realistic volume patterns
for i in range(n_samples):
    base = 200
    # Time of day effect
    if 7 <= data['hour'][i] <= 9:
        base += np.random.normal(300, 50)
    elif 16 <= data['hour'][i] <= 19:
        base += np.random.normal(400, 60)
    else:
        base += np.random.normal(100, 30)
    
    # Road type effect
    if data['road_type'][i] == 'highway':
        base *= 1.8
    elif data['road_type'][i] == 'arterial':
        base *= 1.4
    
    # Weather effects
    base *= max(0.7, 1 - (data['humidity'][i] - 70)/100)
    base *= max(0.5, 1 - data['wind_speed'][i]/100)
    
    # Special conditions
    if data['is_holiday'][i]:
        base *= 0.7
    if data['is_weekend'][i]:
        base = base * 0.9 if 7 <= data['hour'][i] <= 19 else base * 1.2
    
    data['volume'][i] = max(50, base + np.random.normal(0, 50))

df = pd.DataFrame(data)

# Define features and target
X = df.drop('volume', axis=1)
y = df['volume']

# Define preprocessing pipeline
categorical_features = ['road_type', 'near_intersection']
numerical_features = ['hour', 'temperature', 'humidity', 'wind_speed', 'is_holiday', 'is_weekend']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ])

# Create and train model
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(
        n_estimators=150,
        max_depth=12,
        min_samples_split=5,
        random_state=42,
        n_jobs=-1
    ))
])

model.fit(X, y)

# Save the trained model
joblib.dump(model, 'model.pkl')

# Evaluate model performance
train_preds = model.predict(X)
mae = np.mean(np.abs(train_preds - y))
rmse = np.sqrt(np.mean((train_preds - y)**2))
r2 = model.score(X, y)

print(f"Model trained successfully!")
print(f"Training performance:")
print(f"- MAE: {mae:.2f} vehicles")
print(f"- RMSE: {rmse:.2f} vehicles")
print(f"- RÂ²: {r2:.4f}")

# Print sample prediction
sample = pd.DataFrame([{
    'hour': 17,
    'temperature': 22.5,
    'humidity': 65,
    'wind_speed': 10.2,
    'is_holiday': 0,
    'is_weekend': 0,
    'road_type': 'highway',
    'near_intersection': 'yes'
}])

prediction = model.predict(sample)
print(f"\nSample prediction for rush hour on highway: {int(prediction[0])} vehicles/hour")
